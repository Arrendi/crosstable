mutate(x=glue("{mediansuiv} [{minsuiv} ; {maxsuiv}]")) %>%
pull(x) %>% as.character
rtn=rbind(rtn, c("Median follow up [min ; max]", suiv))
}
rtn=rbind(rtn, c("Median survival", x$table["median"]))
rtn
rtn = tibble(variable=paste0("t=", times), count=as.character(mat1))
# nstrata = 1
.tests=.effect=suiv=NULL
if (followup) {
# mediansuiv = round(summary(suivfit.obj)$table["median"], digits = digits)
# tmp = unclass(model.frame(formula)[, 1])
# minsuiv = round(min(tmp[tmp[, 2] == 0, 1]), digits = digits)
# maxsuiv = round(max(tmp[, 1]), digits = digits)
# suiv = glue("{mediansuiv} [{minsuiv} ; {maxsuiv}]")
suiv=tibble(time=surv[,1], status=surv[,2]) %>%
summarise(minsuiv=min(time[status==0]), maxsuiv=max(time)) %>%
mutate(x=glue("{mediansuiv} [{minsuiv} ; {maxsuiv}]")) %>%
pull(x) %>% as.character
rtn=rbind(rtn, c("Median follow up [min ; max]", suiv))
}
rtn=rbind(rtn, c("Median survival", x$table["median"]))
rtn
rtn %>% mutate(.id=surv_string, test=.tests, effect=.effect) %>%
select(.id, variable, everything())
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy2, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/tests/testthat/test-1-crosstable.R')
#showNA
x1=crosstable(mtcars3, c(am,mpg,cyl,surv), by=vs, showNA="no", times=c(0,100,200,400))
source('F:/GITHUB/crosstable/R/summarise_survival.R')
#showNA
x1=crosstable(mtcars3, c(am,mpg,cyl,surv), by=vs, showNA="no", times=c(0,100,200,400))
x1 %>% ctf
x1
source('F:/GITHUB/crosstable/R/summarise_survival.R')
x1=crosstable(mtcars3, c(am,mpg,cyl,surv), by=vs, showNA="no", times=c(0,100,200,400))
by
rtn %>% rename(dummy=count)
names(by)
unique(by)
rtn %>% rename(unique(by)=count)
rtn %>% rename(!!unique(by):=count)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
by
!is.null(by)
rtn %>% rename(!!unique(by):=count)
unique(by)
rename
rtn %>% rename(!!unique(by):=count)
rtn %>% rename(!!{unique(by)}:=count)
unique
unique(by)
by = as.character(by)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy2, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
label(aml$surv) = "survival"
Hmisc::label(aml$surv) = "survival"
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy2, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy2, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
devtools::load_all(".")
crosstable(mtcars3, is.numeric.and.not.surv, by=disp)
devtools::load_all(".")
mtcars3 = mtcars2
mtcars3$cyl[1:5] = NA
mtcars3$vs[5:12] = NA
mtcars3$cyl3 = mtcars3$cyl==3
mtcars3$cyl6 = mtcars3$cyl==6
mtcars3$surv = Surv(mtcars3$disp, mtcars3$am=="manual")
Hmisc::label(mtcars3$surv) = "Dummy survival"
crosstable(mtcars3, is.numeric.and.not.surv, by=disp)
crosstable(mtcars3, c(am,mpg,cyl,surv), by=vs, showNA="no", times=c(0,100,200,400))
dim(x1)
source('F:/GITHUB/crosstable/R/cross_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/cross_survival.R')
source('F:/GITHUB/crosstable/R/cross_by.R')
source('F:/GITHUB/crosstable/R/crosstable.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
summarise_survival_single2
source('F:/GITHUB/crosstable/R/crosstable.R')
source('F:/GITHUB/crosstable/R/cross_by.R')
source('F:/GITHUB/crosstable/R/cross_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
aml$dummy2 = c(rep("A",7), rep("B",8), rep(NA,8))
source('F:/GITHUB/crosstable/R/summarise_survival.R')
aml$dummy
aml$dummy = factor("dummy")
aml$dummy
# crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
# crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, total=T, showNA = T, test=T, effect=T)
crosstable(aml, surv, by=dummy, times=c(0,15,30,150), followup=TRUE, total=T, showNA = T, test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
unique(by)
x$strata
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
rtn
unique(by)
rtn = summarise_survival_single2(surv, times, digits, followup)
rtn = rtn %>%
rename(!!cname:=count) %>%
mutate(test=if(test) "No test" else NULL,
effect=if(effect) "No Effect" else NULL) %>%
select(variable, everything())
cname = as.character(unique(by))
rtn = summarise_survival_single2(surv, times, digits, followup)
rtn = rtn %>%
rename(!!cname:=count) %>%
mutate(test=if(test) "No test" else NULL,
effect=if(effect) "No Effect" else NULL) %>%
select(variable, everything())
rtn
crosstable(mtcars3, is.numeric.and.not.surv, by=disp, test=T)
crosstable(mtcars3, is.numeric.and.not.surv, by=vs, test=T)
crosstable(mtcars3, is.numeric.and.not.surv, by="r", test=T)
mtcars3$dummy = "dummy"
crosstable(mtcars3, is.numeric.and.not.surv, by=dummy, test=T)
rtn
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
x
counts
nstrata
x$strata
nstrata = length(unique(x$strata))
rtn = tibble(count=as.character(counts), by=x$strata) %>%
group_by(by) %>% mutate(x=row_number()) %>%
# mutate_at(vars(by), ~stringr::str_remove(.x, ".*=")) %>%
pivot_wider(names_from = "by", values_from = "count") %>%
select(-x) %>%
set_names(names(table(by))) %>%
mutate(variable=paste0("t=", times)) %>%
select(variable, everything())
source('F:/GITHUB/crosstable/R/summarise_survival.R')
nstrata = length(unique(x$strata))
rtn = tibble(count=as.character(counts), by=x$strata) %>%
group_by(by) %>% mutate(x=row_number()) %>%
# mutate_at(vars(by), ~stringr::str_remove(.x, ".*=")) %>%
pivot_wider(names_from = "by", values_from = "count") %>%
select(-x) %>%
set_names(names(table(by))) %>%
mutate(variable=paste0("t=", times)) %>%
select(variable, everything())
if (followup) {
mediansuiv = round(summary(fit_fu)$table[, "median"], digits = digits)
suiv=tibble(time=surv[,1], status=surv[,2], by) %>%
group_by(by) %>%
summarise(minsuiv=min(time[status==0]), maxsuiv=max(time)) %>%
mutate(x=glue("{mediansuiv} [{minsuiv} ; {maxsuiv}]")) %>%
pull(x) %>% as.character
rtn=rbind(rtn, c("Median follow up [min ; max]", suiv))
}
followup
nstrata
assert_that(length(unique(x$strata))>1)
assert(length(unique(x$strata))>1)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
effect_args
effect_args=crosstable_effect_args()
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
# crosstable(aml, surv, times=c(0,15,30,150), followup=TRUE, test=T, effect=T)
crosstable(aml, surv, by=x, times=c(0,15,30,150), followup=TRUE, total=T, showNA = "always", test=T, effect=T)
source('F:/GITHUB/crosstable/R/summarise_survival.R')
source('F:/GITHUB/crosstable/R/summarise_survival.R')
1
#2sample ttest, fisher, welch, chi2, logrank
name = "test_stats.rds"
x = crosstable(mtcars3, -c(carb,disp), by=vs, times=c(0,100,200,400), test=T)
devtools::load_all(".")
#2sample ttest, fisher, welch, chi2, logrank
name = "test_stats.rds"
x = crosstable(mtcars3, -c(carb,disp), by=vs, times=c(0,100,200,400), test=T)
# Init --------------------------------------------------------------------
Sys.setenv(LANG = "en")
options(warn = 1)
options(stringsAsFactors = FALSE)
options(tidyselect_verbosity = "verbose")
library(survival)
library(dplyr)
# library(Hmisc)
mtcars3 = mtcars2
mtcars3$cyl[1:5] = NA
mtcars3$vs[5:12] = NA
mtcars3$cyl3 = mtcars3$cyl==3
mtcars3$cyl6 = mtcars3$cyl==6
mtcars3$surv = Surv(mtcars3$disp, mtcars3$am=="manual")
Hmisc::label(mtcars3$surv) = "Dummy survival"
# mtcars3$vs = "dummy"
do.save=FALSE
#2sample ttest, fisher, welch, chi2, logrank
name = "test_stats.rds"
x = crosstable(mtcars3, -c(carb,disp), by=vs, times=c(0,100,200,400), test=T)
x %>% cross_to_flextable()
mtcars3$vs
#2sample ttest, fisher, welch, chi2, logrank
name = "test_stats.rds"
x = crosstable(mtcars3, -c(carb,disp), by=vs, times=c(0,100,200,400), test=T)
x %>% cross_to_flextable()
readRDS(paste0("tests/testthat/rds/",name))
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
setdiff(x, readRDS(paste0("tests/testthat/rds/",name)))
saveRDS(x, paste0("tests/testthat/rds/",name), version = 2)
#mean-diff, welch, bootstrap, OR, HR
set.seed(1234)
name = "test_effects.rds"
x = expect_warning(crosstable(mtcars3, -c(cyl,cyl3,gear), by=vs, times=c(0,100,200,400), effect=T),
"Loglik converged before variable  2 ; coefficient may be infinite")
x %>% cross_to_flextable()
readRDS(paste0("tests/testthat/rds/",name))
setdiff(x, readRDS(paste0("tests/testthat/rds/",name)))
saveRDS(x, paste0("tests/testthat/rds/",name), version = 2)
name = "test_everything.rds"
set.seed(1234)
x = expect_warning(crosstable(mtcars3, disp+hp+am+surv~vs, margin="all", total="both", times=c(0,100,200,400), followup=TRUE,
funs_arg = list(dig=9), test=T, effect=T),"cannot compute exact p-value with ties")
x %>% cross_to_flextable()
setdiff(x, readRDS(paste0("tests/testthat/rds/",name)))
saveRDS(x, paste0("tests/testthat/rds/",name), version = 2)
dplyr::tibble
set_names
stopifnot(is.Surv(surv))
min
dplyr::.
devtools::load_all(".")
devtools::load_all(".")
x=compact(iris)
x=crosstable(iris)
compact(x)
source('F:/GITHUB/crosstable/R/compact.R')
x=crosstable(iris)
compact(x)
names(data)
str_subset(names(data),"test|effect")
names(data)
library(stringr)
str_subset(names(data),"test|effect")
str_subset(names(data),"[test|effect]")
str_subset(names(data),"test|effect")
str_subset(names(data),"test||effect")
str_subset(names(data),"test")
x=crosstable(iris, by=species, test=TRUE, effect=TRUE)
x=crosstable(iris, by=Species, test=TRUE, effect=TRUE)
compact(x)
str_subset(names(data),"test|effect")
?compact
?compact
compact(x)
source('F:/GITHUB/crosstable/R/compact.R')
source('F:/GITHUB/crosstable/R/compact.R')
compact(x)
source('F:/GITHUB/crosstable/R/compact.R')
compact(x)
wrappable
setdiff(wrappable, names(data))
names(data)
setdiff(names(data), wrappable)
intersect(names(data), wrappable)
data %>%
compact.data.frame(name_from=name_from, name_to=name_to,
wrap_cols=wrap_cols, rtn_flextable=FALSE)
wrap_cols = intersect(names(data), wrappable)
data %>%
compact.data.frame(name_from=name_from, name_to=name_to,
wrap_cols=wrap_cols, rtn_flextable=FALSE)
name_from=c("label", ".id")
name_from = match.arg(name_from)
character_vector <- c("abc ghi jkl mno def", "pqr abc def", "abc jkl pqr")
pattern <- c("def", "pqr")
intersect(
str_subset(character_vector, pattern[1]),
str_subset(character_vector, pattern[2])
)
intersect(character_vector, pattern)
str_subset(character_vector, paste(pattern, collapse="|"))
str_subset(character_vector, paste(pattern, collapse="&"))
str_subset(character_vector, pattern[1])
str_subset(character_vector, pattern[2])
intersect(
str_subset(character_vector, pattern[1]),
str_subset(character_vector, pattern[2])
)
source('F:/GITHUB/crosstable/R/compact.R')
compact(x)
source('F:/GITHUB/crosstable/R/compact.R')
data
name_from
source('F:/GITHUB/crosstable/R/compact.R')
data %>%
compact.data.frame(name_from=name_from, name_to=name_to,
wrap_cols=wrap_cols, rtn_flextable=FALSE)
x=crosstable(mtcars2, disp,hp,cyl, by=vs, test=TRUE, effect=TRUE)
crosstable(mtcars2, disp,hp,cyl, by=vs, test=TRUE, effect=TRUE)
crosstable(mtcars2, disp,hp,cyl, by=am, test=TRUE, effect=TRUE)
crosstable(mtcars2, cyl, by=vs, effect=TRUE)
crosstable(mtcars2, disp,hp,am, by=vs, test=TRUE, effect=TRUE)
x=crosstable(mtcars2, disp,hp,am, by=vs, test=TRUE, effect=TRUE)
compact(x)
data %>%
compact.data.frame(name_from=name_from, name_to=name_to,
wrap_cols=wrap_cols, rtn_flextable=FALSE)
source('F:/GITHUB/crosstable/R/compact.R')
x=crosstable(mtcars2, disp,hp,am, by=vs, test=TRUE, effect=TRUE)
compact(x)
x=crosstable(mtcars2, disp,hp,am, by=vs, test=TRUE)
compact(x)
compact(x, name_from=".id")
ab=NULL
attr(ab, "huh")="uhuh"
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
crosstable(mtcars2, by=vs, test = TRUE) %>% cross_to_flextable()
labs.names = crosstable %>% names %>% .[!(. %in% generic.labels)]
labs.names
crosstable %>% names
generic.labels
intersect(names(crosstable), generic.labels)
labs.names
setdiff(names(crosstable), generic.labels)
setdiff(generic.labels, names(crosstable))
labs.names
setdiff(names(crosstable), generic.labels)
crosstable %>% names %>% .[!(. %in% generic.labels)]
setdiff(names(crosstable), generic.labels)
setdiff
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
crosstable(iris, by=Species, test = TRUE) %>% cross_to_flextable(show.test.name=FALSE)
crosstable[[test]] %>% gsub("\\n\\(.*\\)", "", .)
crosstable[[test]] %>% str_remove("\\n\\(.*\\)")
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
crosstable(iris, by=Species, test = TRUE) %>% cross_to_flextable(show.test.name=FALSE)
body_merge = rtn %>% names %>% .[!. %in% c(generic.labels[2:4],by_levels)]
body_merge
setdiff(names(rtn), c(generic.labels[2:4],by_levels))
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
keep_id
!keep_id
header_values
setdiff(header_values, id)
header_values %>% .[.!=id]
crosstable %>% names %>%
ifelse(. %in% by_levels, byname, .) %>% unique
crosstable %>% names
by_levels
byname
crosstable %>% names %>%
ifelse(. %in% by_levels, byname, .) %>% unique
crosstable %>% names %>% str_replace_all(by_levels, byname) %>% unique
by_levels
byname
crosstable %>% names %>%
str_replace_all(paste(by_levels, collapse="|"), byname) %>% unique
crosstable %>% names %>%
ifelse(. %in% by_levels, byname, .) %>% unique
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
devtools::load_all(".")
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
ct2 = crosstable(esoph, by="tobgp", test = TRUE)
ctf(ct1)
ctf(ct2, compact=TRUE)
expect_identical(ctf(ct1), ctf(ct2, compact=TRUE))
test_that("compact.crosstable gives good flextables", {
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
expect_equal(dim(ct1), c(22,6))
expect_is(ct1, c("data.frame"))
expect_is(ct1, c("crosstable"))
expect_is(ct1, c("compacted_crosstable"))
ct2 = crosstable(esoph, by="tobgp", test = TRUE)
expect_identical(ctf(ct1), ctf(ct2, compact=TRUE))
})
test_that("compact.crosstable gives good flextables", {
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
expect_equal(dim(ct1), c(22,6))
expect_is(ct1, c("data.frame"))
expect_is(ct1, c("crosstable"))
expect_is(ct1, c("compacted_crosstable"))
ct2 = crosstable(esoph, by="tobgp", test = TRUE)
expect_identical(ctf(ct1), ctf(ct2, compact=TRUE))
})
test_that("compact.crosstable gives good flextables", {
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
expect_equal(dim(ct1), c(22,6))
expect_is(ct1, c("data.frame"))
expect_is(ct1, c("crosstable"))
expect_is(ct1, c("compacted_crosstable"))
ct2 = crosstable(esoph, by="tobgp", test = TRUE)
expect_identical(ctf(ct1), ctf(ct2, compact=TRUE))
})
ct1 = crosstable(esoph, by="tobgp", test = TRUE) %>% compact
expect_equal(dim(ct1), c(22,6))
expect_is(ct1, c("data.frame"))
expect_is(ct1, c("crosstable"))
expect_is(ct1, c("compacted_crosstable"))
ct2 = crosstable(esoph, by="tobgp", test = TRUE)
expect_identical(ctf(ct1), ctf(ct2, compact=TRUE))
ctf(ct1)
ctf(ct2, compact=TRUE)
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
header_values
header_colwidths
byname
header_values==byname
names(crosstable)
labs.names
# header_values = crosstable %>% names %>%
#     str_replace_all(paste(by_levels, collapse="|"), byname) %>% unique
header_values = crosstable %>% names
header_values = ifelse(header_values %in% by_levels, byname, header_values) %>% unique
header_values
source('F:/GITHUB/crosstable/R/cross_to_flextable.R')
ctf(ct1)
x = crosstable(mtcars3, c(disp, hp, am), by=vs, funs=c(moystd,quantile),
funs_arg = list(dig=3, probs=c(0.25,0.75)),
total=T, showNA="always")
stres
mtcars3 = mtcars2
mtcars3$cyl[1:5] = NA
mtcars3$vs[5:12] = NA
mtcars3$cyl3 = mtcars3$cyl==3
mtcars3$cyl6 = mtcars3$cyl==6
mtcars3$surv = Surv(mtcars3$disp, mtcars3$am=="manual")
Hmisc::label(mtcars3$surv) = "Dummy survival"
Sys.setenv(LANG = "en")
options(warn = 1)
options(stringsAsFactors = FALSE)
options(tidyselect_verbosity = "verbose")
library(survival)
library(dplyr)
# library(Hmisc)
mtcars3 = mtcars2
mtcars3$cyl[1:5] = NA
mtcars3$vs[5:12] = NA
mtcars3$cyl3 = mtcars3$cyl==3
mtcars3$cyl6 = mtcars3$cyl==6
mtcars3$surv = Surv(mtcars3$disp, mtcars3$am=="manual")
Hmisc::label(mtcars3$surv) = "Dummy survival"
# mtcars3$vs = "dummy"
do.save=FALSE
name = "test_funs_arg.Rds"
x = crosstable(mtcars3, c(disp, hp, am), by=vs, funs=c(moystd,quantile),
funs_arg = list(dig=3, probs=c(0.25,0.75)),
total=T, showNA="always")
x %>% cross_to_flextable()
readRDS(paste0("tests/testthat/rds/",name))
setdiff(x, readRDS(paste0("tests/testthat/rds/",name)))
devtools::load_all(".")
name = "test_funs_arg.Rds"
x = crosstable(mtcars3, c(disp, hp, am), by=vs, funs=c(moystd,quantile),
funs_arg = list(dig=3, probs=c(0.25,0.75)),
total=T, showNA="always")
x %>% cross_to_flextable()
setdiff(x, readRDS(paste0("tests/testthat/rds/",name)))
readRDS(paste0("tests/testthat/rds/",name))
source('F:/GITHUB/crosstable/tests/testthat/test-1-crosstable.R')
do.save=FALSE
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
install.packages("xml2")
install.packages("flextable")
install.packages("expss")
devtools::install(build_vignettes = TRUE)
install.packages("glue")
install.packages("glue")
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
Sys.getenv("R_LIBS_USER")
.libPaths()
